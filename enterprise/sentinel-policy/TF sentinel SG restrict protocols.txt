  import "tfplan"

  get_albs = func() {
      albs = []
      for tfplan.module_paths as path {
          albs += values(tfplan.module(path).resources.aws_lb) else []
      }
      return albs
  }

  application_load_balancers = get_albs()

  get_security_group_rules = func() {
      security_group_rule = []
      for tfplan.module_paths as path {
          security_group_rule += values(tfplan.module(path).resources.aws_security_group_rule) else []
      }
      return security_group_rule
  }

  security_group_rules = get_security_group_rules()

 /* check_protocols = rule {
    all application_load_balancers as _, albs {
      all albs as index, r {
        all security_group_rules as _, sg {
          all sg as index, s {
            ((s.applied.security_group_id in r.applied.security_groups) and
            (length (s.applied.protocol) > 0) and
            (s.applied.protocol not matches "ALL")) else false
          }
        }
      }
    }
  }*/
    
  check_protocols = rule {
    all application_load_balancers as _, albs {
      all albs as _, r {
        all security_group_rules as _, sg {
          all sg as _, s {
            (s.applied.security_group_id in r.applied.security_groups or
            s.applied.protocol not in ["all", -1]) else false
          }
        }
      }
    }
  }

  # Main rule that requires other rules to be true
  main = rule {
    (check_protocols) else true
  }

